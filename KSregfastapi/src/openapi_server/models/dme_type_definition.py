# coding: utf-8

"""
    Data registration service

    API for Data registration service. Â© 2024, O-RAN ALLIANCE. All rights reserved. 

    The version of the OpenAPI document: 2.0.0-alpha.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.data_delivery_mechanism import DataDeliveryMechanism
from openapi_server.models.delivery_schema import DeliverySchema
from openapi_server.models.dme_type_id_struct import DmeTypeIdStruct
from openapi_server.models.metadata import Metadata
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DmeTypeDefinition(BaseModel):
    """
    Information of the DME type
    """ # noqa: E501
    dme_type_id: Optional[DmeTypeIdStruct] = Field(default=None, alias="dmeTypeId")
    metadata: Optional[Metadata] = None
    data_production_schema: Optional[Dict[str, Any]] = Field(default=None, description="Schema that defines the information necessary to formulate a data request or data subscription.   If this attribute is not present, the schema is assumed to be known from the DME type definition that is referenced by dmeTypeId", alias="dataProductionSchema")
    data_delivery_schemas: Optional[List[DeliverySchema]] = Field(default=None, description="List of delivery schemas supported by the producer for the DME type being registered.", alias="dataDeliverySchemas")
    data_delivery_mechanisms: Optional[List[Optional[DataDeliveryMechanism]]] = Field(default=None, description="Defining the delivery mechanism supported by Data Producer ", alias="dataDeliveryMechanisms")
    __properties: ClassVar[List[str]] = ["dmeTypeId", "metadata", "dataProductionSchema", "dataDeliverySchemas", "dataDeliveryMechanisms"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DmeTypeDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dme_type_id
        if self.dme_type_id:
            _dict['dmeTypeId'] = self.dme_type_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_delivery_schemas (list)
        _items = []
        if self.data_delivery_schemas:
            for _item in self.data_delivery_schemas:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataDeliverySchemas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_delivery_mechanisms (list)
        _items = []
        if self.data_delivery_mechanisms:
            for _item in self.data_delivery_mechanisms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataDeliveryMechanisms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DmeTypeDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dmeTypeId": DmeTypeIdStruct.from_dict(obj.get("dmeTypeId")) if obj.get("dmeTypeId") is not None else None,
            "metadata": Metadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "dataProductionSchema": obj.get("dataProductionSchema"),
            "dataDeliverySchemas": [DeliverySchema.from_dict(_item) for _item in obj.get("dataDeliverySchemas")] if obj.get("dataDeliverySchemas") is not None else None,
            "dataDeliveryMechanisms": [DataDeliveryMechanism.from_dict(_item) for _item in obj.get("dataDeliveryMechanisms")] if obj.get("dataDeliveryMechanisms") is not None else None
        })
        return _obj


