# coding: utf-8

"""
    Data registration service

    API for Data registration service. Â© 2024, O-RAN ALLIANCE. All rights reserved. 

    The version of the OpenAPI document: 2.0.0-alpha.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class KafkaDeliveryConfiguration(BaseModel):
    """
    These configuration will be applied if KAFKA_DATA_STREAM is selected as delivery method
    """ # noqa: E501
    num_partitions: Optional[StrictInt] = Field(default=None, description="Number of partitions", alias="numPartitions")
    clean_up_policy: Optional[StrictStr] = Field(default=None, description="cleanUpPolicy is based on cleanup.policy defined in the Kafka Documentation [15]. ", alias="cleanUpPolicy")
    compression_type: Optional[StrictStr] = Field(default=None, description=" compressionType is based on compression.type defined in the Kafka Documentation [15] .", alias="compressionType")
    retention_bytes: Optional[StrictInt] = Field(default=None, description=" retentionBytes is based on retention.bytes defined in the Kafka Documentation [15] . This attribute is applicable ONLY when cleanUpPolicy is set to DELETE", alias="retentionBytes")
    retention_ms: Optional[StrictInt] = Field(default=None, description=" retentionMs is based on retention.ms defined in the Kafka Documentation [15] . This attribute is applicable ONLY when cleanUpPolicy is set to DELETE", alias="retentionMs")
    __properties: ClassVar[List[str]] = ["numPartitions", "cleanUpPolicy", "compressionType", "retentionBytes", "retentionMs"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of KafkaDeliveryConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of KafkaDeliveryConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numPartitions": obj.get("numPartitions"),
            "cleanUpPolicy": obj.get("cleanUpPolicy"),
            "compressionType": obj.get("compressionType"),
            "retentionBytes": obj.get("retentionBytes"),
            "retentionMs": obj.get("retentionMs")
        })
        return _obj


