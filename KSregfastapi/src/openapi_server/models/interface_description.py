# coding: utf-8

"""
    Data registration service

    API for Data registration service. Â© 2024, O-RAN ALLIANCE. All rights reserved. 

    The version of the OpenAPI document: 2.0.0-alpha.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.o_auth_grant_type import OAuthGrantType
from openapi_server.models.security_method import SecurityMethod
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InterfaceDescription(BaseModel):
    """
    Represents the description of an API's interface.
    """ # noqa: E501
    ipv4_addr: Optional[StrictStr] = Field(default=None, description="string identifying a Ipv4 address formatted in the \"dotted decimal\" notation as defined in IETF RFC 1166. ", alias="ipv4Addr")
    ipv6_addr: Optional[StrictStr] = Field(default=None, description="string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used. ", alias="ipv6Addr")
    fqdn: Optional[Annotated[str, Field(min_length=4, strict=True, max_length=253)]] = Field(default=None, description="Fully Qualified Domain Name")
    port: Optional[Annotated[int, Field(le=65535, strict=True, ge=0)]] = Field(default=None, description="Unsigned integer with valid values between 0 and 65535.")
    api_prefix: Optional[StrictStr] = Field(default=None, description="A string representing a sequence of path segments that starts with the slash character. ", alias="apiPrefix")
    security_methods: Optional[Annotated[List[SecurityMethod], Field(min_length=1)]] = Field(default=None, description="Security methods supported by the interface, it take precedence over the security methods provided in AefProfile, for this specific interface. ", alias="securityMethods")
    grant_types: Optional[Annotated[List[OAuthGrantType], Field(min_length=1)]] = Field(default=None, alias="grantTypes")
    __properties: ClassVar[List[str]] = ["ipv4Addr", "ipv6Addr", "fqdn", "port", "apiPrefix", "securityMethods", "grantTypes"]

    @field_validator('fqdn')
    def fqdn_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$", value):
            raise ValueError(r"must validate the regular expression /^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InterfaceDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in security_methods (list)
        _items = []
        if self.security_methods:
            for _item in self.security_methods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['securityMethods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grant_types (list)
        _items = []
        if self.grant_types:
            for _item in self.grant_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['grantTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InterfaceDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipv4Addr": obj.get("ipv4Addr"),
            "ipv6Addr": obj.get("ipv6Addr"),
            "fqdn": obj.get("fqdn"),
            "port": obj.get("port"),
            "apiPrefix": obj.get("apiPrefix"),
            "securityMethods": [SecurityMethod.from_dict(_item) for _item in obj.get("securityMethods")] if obj.get("securityMethods") is not None else None,
            "grantTypes": [OAuthGrantType.from_dict(_item) for _item in obj.get("grantTypes")] if obj.get("grantTypes") is not None else None
        })
        return _obj


